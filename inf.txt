celery -A StorefrontBackend2 beat
celery -A StorefrontBackend2 flower
pwd or py.test

locust -f locustfiles/browse_products.py
docker run -d -p 6379:6379 redis 

silk use localhost:8000/silk/ of our project

add /media/ and /static/ to gitignore

install whitenoise: dajngo does't support serving static files in production even though we collect them using cmd  
collectstatic but to add this feature in production we have to install library whitenoise,using
whitenoise we can serve our collected statics in production as well.

se logging.so later when app is deployed we can see the log file and troubleshoot issue.
add logfile in .gitignore i.e general.log

install gunicorm(fast server then testing dev server):
then to run our app on gunicorm server use 'gunicorm StorefrontBackend2.wsgi'

we can make our app pwa(for mobile non native app of same web)


# ---- #
Procfile(only for heroku) and write initial cmds every time our server start in procfile.
configure heroku ad-on for our app and choose the db service (i.e CLEARBD on) for provisioning 
mysql on our heroku cloud.
'heroku config' -> to see the our env vars on heroku cloud server, copy CLEARBD url before '?'
and create an env var 'heroku config:set DATABASE_URL(anything)="value of clear db env"'

do the same in other vps but without procfiles

5(only for heroku):
provision a redis instance (ad-on heroku redis):
provision our smtp server (ad-on Mailgun):

# -----to install all the dependencies from requirements.txt
# pip install -r requirements.txt
# -----git global
# echo "https://${GH_USERNAME}:${GH_TOKEN}@github.com" > ~/.git-credentials

# This will create the ~/.git-credentials file and write the contents of your environment variables to it. The ${GH_USERNAME} and ${GH_TOKEN} syntax is used to reference the values of the environment variables.

# To configure Git to use the credentials stored in the ~/.git-credentials file, you can run the following command:

# lua

# git config --global credential.helper store

# This will set the Git global configuration setting credential.helper to store, which tells Git to use the contents of the ~/.git-credentials file for authentication.

# DB CREDENTIALS
Enter the username: ourbloguser
Enter the password: OurBlogPassword
Enter the database name: ourblogdb

pg_dump -h localhost -p 5432 -U ourbloguser ourblogdb > OurBlogDBDumb.sql
python3 manage.py dumpdata --exclude auth.permission --exclude contenttypes > data.json
python3 manage.py loaddata data.json
sudo fuser -k 8000/tcp

python3 manage.py dbbackup
python3 manage.py dbrestore


# way to tag
docker tag our-blog-backend:latest qandeelhaider/our-blog-backend:latest

docker inspect my-postgres-container | grep IPAddress

docker-compose run web python3 manage.py migrate
docker exec -it container_id python manage.py migrate
docker-compose exec app python manage.py makemigrations
docker push qandeelhaider/our-blog-backend:latest
chmod a+x wait-for-it.sh
docker-compose logs web
docker volume ls
# backup data
docker exec -t my-postgres-container pg_dumpall -c -U postgres > dump_`date +%d-%m-%Y"_"%H_%M_%S`.sql
# restore data
cat newbackup.sql | docker exec -i my-postgres-container psql -U postgres
# to clear db
python3 manage.py flush --no-input


sudo systemctl stop postgresql 
docker compose up

